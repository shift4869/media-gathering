# config.ini
# (1)以下の項目について自分の環境に書き換える（主に{}内や必須と書かれている項目）
# (2)このファイル（config_example.ini）を config.ini にリネーム
# (3)media_gathering.pyから見て ./config/config.ini に配置する

# twitterのセッション情報を記載（必須）
# 「twitter クッキー ct0 auth_token」等でgoogle検索
[twitter_api_client]
ct0                 = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
auth_token          = xxxxxxxxxxxxxxxxxxxxxxxxx
target_screen_name  = {your Twitter ID screen_name (exclude @)}
target_id           = {your Twitter ID (numeric)}

# TLの収集範囲などを調整するパラメータ（必須）
# 遡るツイート数・ループ回数を増やすほどツイートキャップのカウントが増加する
[tweet_timeline]
likes_get_max_loop = 40
likes_get_max_count = 300
retweet_get_max_loop = 40
retweet_get_max_count = 300

# DLしたメディアの保存先ディレクトリを絶対パスで記載（必須）
[save_directory]
save_fav_path = C:\Users\{username}\Pictures\media-gathering\twitterFav
save_retweet_path = C:\Users\{username}\Pictures\media-gathering\twitterRT

# save_permanent_media_flag = 元メディアを常に保存するかどうかのフラグ{True,False}（必須）
# save_permanent_media_path = 元メディアを常に保存する場合の保存先ディレクトリの絶対パス（同フラグがTrueの場合必須）
#                             ※save_directoryのディレクトリとは別の場所を指定すること
[save_permanent]
save_permanent_media_flag = True
save_permanent_media_path = R:/twitter/media-gathering

# 保存先ディレクトリに何枚までメディアを保持するか（必須:1以上）
[holding]
holding_file_num = 300

# DLしたメディア情報を保持するDBの保存先を記載
# save_path = 保存先ディレクトリの絶対パス（必須）
# save_file_name = DB保存名（必須）
# save_blob_flag = DBにメディアバイナリを埋め込むかどうかのフラグ{True,False}（必須）
#                  TrueならばDBにメディアバイナリをblobとして埋め込む。DBからメディアを直接復元できるがサイズは大きくなる
#                  FalseならばDBにメディアバイナリを埋め込まない。DBにはメディアリンクのみ格納され、サイズは小さくなる
[db]
save_path = C:\Users\{username}\Documents\python\media-gathering
save_file_name = PG_DB.db
save_blob_flag = False

# pixivリンクについて
# is_pixiv_trace = ツイート本文にpixivのリンクがあった場合、それをトレースして保存するかどうか{True,False}（必須）
# username = 非公式API利用時のpixivユーザーID（上記フラグがTrueなら必須）
# password = 非公式API利用時のpixivユーザーIDのパスワード（上記フラグがTrueなら必須）
# save_base_path = pixivから取得したイラストの保存場所（上記フラグがTrueなら必須）
[pixiv]
is_pixiv_trace = False
username = {your pixiv ID}
password = {your pixiv IDs password}
save_base_path = C:\Users\{username}\Documents\python\PG_Pixiv

# nijieリンクについて
# is_nijie_trace = ツイート本文にnijieのリンクがあった場合、それをトレースして保存するかどうか{True,False}（必須）
# email = nijieユーザー登録時のアドレス、nijieユーザーID（上記フラグがTrueなら必須）
# password = nijieユーザーのパスワード（上記フラグがTrueなら必須）
# save_base_path = nijieから取得したイラストの保存場所（上記フラグがTrueなら必須）
[nijie]
is_nijie_trace = False
email = {your nijie ID email}
password = {your nijie IDs password}
save_base_path = C:\Users\{username}\Documents\python\PG_Nijie

# ニコニコ静画リンクについて
# is_seiga_trace = ツイート本文に静画のリンクがあった場合、それをトレースして保存するかどうか{True,False}（必須）
# email = ニコニコユーザー登録時のアドレス、ニコニコユーザーID（上記フラグがTrueなら必須）
# password = ニコニコユーザーのパスワード（上記フラグがTrueなら必須）
# save_base_path = ニコニコ静画から取得したイラストの保存場所（上記フラグがTrueなら必須）
[nico_seiga]
is_seiga_trace = False
email = {your niconico ID email}
password = {your niconico IDs password}
save_base_path = C:\Users\{username}\Documents\python\PG_Seiga

# 処理後通知フラグ
# reply_to_user_name = 完了メッセージ通知先のツイッターアカウントのスクリーンネーム（※任意）
#                      "@"は含めない。※完了メッセージリプライフラグがどちらか一つでもTrueならば必須
[notification]
reply_to_user_name = {twitter name (exclude "@") to reply}

# discordにポストするためのwebhookURLを記載（任意）
# is_post_discord_notify = discordに完了メッセージを通知するかどうか{True,False}（任意:対応するwebhookURLの設定が必要）
[discord_webhook_url]
is_post_discord_notify = False
webhook_url      = https://discordapp.com/api/webhooks/xxx

# LINEにポストするためのトークンを記載（任意）
# is_post_line_notify = LINEに完了メッセージを通知するかどうか{True,False}（任意:対応するトークンが必要）
[line_token_keys]
is_post_line_notify = False
token_key        = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# slackにポストするためのwebhookURLを記載（任意）
# is_post_slack_notify = slackに完了メッセージを通知するかどうか{True,False}（任意:対応するwebhookURLの設定が必要）
[slack_webhook_url]
is_post_slack_notify = False
webhook_url      = https://hooks.slack.com/xxx
